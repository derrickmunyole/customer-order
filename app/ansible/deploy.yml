---
- name: Deploy Django Application with Docker
  hosts: localhost
  connection: local
  become: yes
  vars:
    app_dir: "/opt/django-app"
    env_file: "{{ app_dir }}/.env"
  
  tasks:
    - name: Add Docker repository
      get_url:
        url: https://download.docker.com/linux/fedora/docker-ce.repo
        dest: /etc/yum.repos.d/docker-ce.repo

    - name: Install required packages
      dnf:
        name: 
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present
        update_cache: yes

    - name: Download and install Docker Compose
      get_url:
        url: "https://github.com/docker/compose/releases/download/v2.23.3/docker-compose-linux-x86_64"
        dest: "/usr/local/bin/docker-compose"
        mode: '0755'

    - name: Ensure Docker service is started
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Create application directory
      file:
        path: "{{ app_dir }}"
        state: directory
        mode: '0755'
        owner: derrick
        group: derrick

    - name: Copy application files
      synchronize:
        src: "{{ playbook_dir }}/../../{{ item }}"
        dest: "{{ app_dir }}/"
        recursive: yes
        owner: yes
        group: yes
      with_items:
        - app/
        - scripts/
        - Dockerfile
        - docker-compose.yml
        - requirements.txt
        - requirements.dev.txt
        - infrastructure


    - name: Debug variables
      debug:
        var: db_host



    - name: Create .env file
      copy:
        content: |
          DB_HOST={{ db_host }}
          DB_NAME={{ db_name }}
          DB_USER={{ db_user }}
          DB_PASS={{ db_password }}
          AFRICASTALKING_USERNAME={{ africas_talking_username }}
          AFRICASTALKING_API_KEY={{ africas_talking_api_key }}
          DJANGOSECRET_KEY={{ django_secret_key }}
          DJANGO_ALLOWED_HOSTS={{ django_allowed_hosts }}
          OAUTH_CLIENT_ID={{ oidc_client_id }}
          OAUTH_CLIENT_SECRET={{ oidc_client_secret }}
        dest: "{{ env_file }}"
        mode: '0600'


    - name: Enable Docker service
      systemd:
        name: docker
        enabled: yes
        daemon_reload: yes

    - name: Build Docker images
      command: docker-compose build
      args:
        chdir: "{{ app_dir }}"
      register: docker_build_result
      retries: 3
      delay: 10
      until: docker_build_result is success


    - name: Start Docker service
      systemd:
        name: docker
        state: started
      register: docker_service_status

    - name: Debug Docker service status
      debug:
        var: docker_service_status

    - name: Wait for Docker service to be ready
      wait_for:
        timeout: 15

    - name: Start Docker services
      command: docker-compose up -d
      args:
        chdir: "{{ app_dir }}"
      register: docker_result
      retries: 3
      delay: 10
      until: docker_result is success
      environment:
        COMPOSE_PROJECT_NAME: customer-order



